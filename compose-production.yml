version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: ./docker/Dockerfile-prod
    container_name: adonis-app
    environment:
      - NODE_ENV=production
      - VIRTUAL_HOST=instances-aystone.silvus.me
      - LETSENCRYPT_HOST=instances-aystone.silvus.me
      - LETSENCRYPT_EMAIL=instancesAY2-noreply@silvus.me
      - VIRTUAL_PORT=80
    # No need to mount the entire project directory in production
    # Only mount configuration files if needed
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    expose:
      - "80"
      - "3333"
    networks:
      - nginx-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx-proxy:
    image: nginxproxy/nginx-proxy:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./certs:/etc/nginx/certs
      - ./vhost.d:/etc/nginx/vhost.d
      - ./html:/usr/share/nginx/html
    networks:
      - nginx-network
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3

  letsencrypt:
    image: nginxproxy/acme-companion
    container_name: nginx-letsencrypt
    environment:
      - DEFAULT_EMAIL=instancesAY2-noreply@silvus.me
    depends_on:
      nginx-proxy:
        condition: service_healthy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/etc/nginx/certs
      - ./vhost.d:/etc/nginx/vhost.d
      - ./html:/usr/share/nginx/html
    networks:
      - nginx-network
    restart: always

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: aystone
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - nginx-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  postgres-data:

networks:
  nginx-network:
    name: nginx-proxy
    external: false
